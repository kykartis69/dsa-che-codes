#include<iostream>
using namespace std;
class stack
{
int s[20];
int top;
public:
int stackfull();
int empty();
void push(char);
char pop();
void infix_to_postfix(char infix[],char postfix[]);
int precedence(char);
void init()
{
	top=-1;
}
};
int stack:: stackfull()
{
if(top==19)
	return 1;
else
	return 0;
}
int stack::empty()
{
if(top==-1)
	return 1;
else
	return 0;
}
void stack::push(char a)
{
if(stackfull())
	cout<<"stack full";
else
{
	s[++top]=a;
}
}
char stack::pop()
{char x;
if(empty())
	cout<<"stack empty";
else
{
	x=s[top];
	top--;

}
return x;
}
int stack::precedence(char ch)
{
	if(ch=='(')
		return 1;
	else if(ch=='+' || ch=='-')
		return 2;
	else if(ch=='*' || ch=='/')
		return 3;
	return 0;
}
void stack::infix_to_postfix(char infix[],char postfix[])
{
	char x,token;
	int i,j;
	init();
	j=0;

	for(i=0;infix[i]!='\0';i++)
	{
		token=infix[i];
		if(isalnum(token))
			postfix[j++]=token;
		else if(token=='(')
			push('(');
		else if(token==')')
			{while((x=pop())!='(')
		postfix[j++]=x;}
		else
		{
			while(precedence(token)<=precedence(s[top]) &&!empty())
			{
				x=pop();
				postfix[j++]=x;
			}push(token);
		}
	}
	while(!empty())
	{
		x=pop();
		postfix[j++]=x;
	}
postfix[j]='\0';
}
